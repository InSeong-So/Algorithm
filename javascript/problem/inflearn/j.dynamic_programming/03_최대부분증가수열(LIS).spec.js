/*=======================================================================================
[최대 부분 증가수열]
N개의 자연수로 이루어진 수열이 주어졌을 때, 그 중에서 가장 길게 증가하는(작은 수에서 큰 수로) 원소들의 집합을 찾는 프로그램을 작성하라.
예를 들어, 원소가 2, 7, 5, 8, 6, 4, 7, 12, 3 이면
가장 길게 증가하도록 원소들을 차례대로 뽑아내면 2, 5, 6, 7, 12를 뽑아내어 길이가 5인 최대 부분 증가수열을 만들 수 있다.
=======================================================================================*/

// ▣ 입력설명
// 첫째 줄은 입력되는 데이터의 수 N(1≤N≤1,000, 자연수)를 의미하고,
// 둘째 줄은 N개의 입력데이터들이 주어진다.

// ▣ 출력설명
// 첫 번째 줄에 부분증가수열의 최대 길이를 출력한다.

// ▣ 입력예제 1
// 8
// 5 3 7 8 6 2 9 4

// ▣ 출력예제 1
// 4

// LIS, 최대 부분 증가수열로 유명함
function solution(arr) {
  // 내가 만드는 증가수열의 길이 값을 저장할 배열
  let dy = Array.from({ length: arr.length }, () => 0);

  // 무조건 만들어질 수 있는 경우의 수가 1이므로 1로 초기화
  dy[0] = 1;

  for (let i = 0; i < arr.length; i++) {
    let max = 0;
    for (let j = i - 1; j >= 0; j--) {
      if (arr[j] < arr[i] && dy[j] > max) {
        max = dy[j];
      }
    }
    dy[i] = max + 1;
  }

  return Math.max(...dy);
}

/**
 * ========================================================
 * @Title       : 03_최대부분증가수열(LIS)
 * @Path        : javascript\02_Solved\inflearn\j.dynamic_programming\03_최대부분증가수열(LIS).spec.js
 * @Description : LIS 알고리즘
 * @Date        : 2021-07-06 16:14:56
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('03_최대부분증가수열(LIS)', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let arr = [5, 3, 7, 8, 6, 2, 9, 4];
    const result = 4;

    // 테스트 결과 정의
    expect(solution(arr)).toEqual(result);
  });
});
