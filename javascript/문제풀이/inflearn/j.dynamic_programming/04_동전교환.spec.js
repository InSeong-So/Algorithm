/*=======================================================================================
[ 동전교환(냅색 알고리즘) ]
다음과 같이 여러 단위의 동전들이 주어져 있을때 거스름돈을 가장 적은 수의 동전으로 교환해주려면 어떻게 주면 되는가?
각 단위의 동전은 무한정 쓸 수 있다.
=======================================================================================*/

// ▣ 입력설명
// N개의 동전의 종류와 거슬러 줄 금액 M(1<=M<=500)이 주어진다.
// 각 동전의 종류는 100원을 넘지 않는다.

// ▣ 출력설명
// 첫 번째 줄에 거슬러 줄 동전의 최소개수를 출력한다.

// ▣ 입력예제 1
// 1 2 5
// 15

// ▣ 출력예제 1
// 3
// (5 5 5 동전 3개로 거슬러 줄 수 있다)

// DFS로 풀 수 있지만 경우의 수가 많을 경우 문제 풀이가 끝나지 않는다.
/**
 * 주어진 coin의 배열을 돌면서 자기 자신을 제외한 거슬러주는 경우의 수를 구하기 때문에 마이너스를 하므로 dy[j - coin[i]]가 된다.
 * 그러나 자기 자신을 포함시켜야 하므로 + 1을 해준다.
 * 즉 dy[j] 가 dy[j - coin[i]] + 1 보다 작으면 바꿔준다.
 */
function solution(m, coin) {
  // 1부터 시작하므로
  let dy = Array.from({ length: m + 1 }, () => Number.MAX_SAFE_INTEGER);

  // 1부터 시작하므로 0번 인덱스는 초기화
  dy[0] = 0;
  for (let i = 0; i < coin.length; i++) {
    // 코인의 금액을 증가시켜서 순회
    for (let j = coin[i]; j <= m; j++) {
      // 조건식을 꼭 생각해봐야 한다. 아래 부분이 핵심 로직이다.
      dy[j] = Math.min(dy[j], dy[j - coin[i]] + 1);
    }
    // 확인
    // console.log(dy);
  }

  return dy[m];
}

/**
 * ========================================================
 * @Title       : 04_동전교환
 * @Path        : javascript\02_Solved\inflearn\j.dynamic_programming\04_동전교환.spec.js
 * @Description : 배낭 알고리즘
 * @Date        : 2021-07-06 16:11:25
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('04_동전교환', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let k = 15;
    let arr = [1, 2, 5];
    const result = 3;

    // 테스트 결과 정의
    expect(solution(k, arr)).toEqual(result);
  });
});
