/*=======================================================================================
// 순열 구하기
// 10이하의 N개의 자연수가 주어지면 이 중 M개를 뽑아 일렬로 나열하는 방법을 모두 출력한다.
=======================================================================================*/

// ▣ 입력설명
// 첫 번째 줄에 자연수 N(3<=N<=10)과 M(2<=M<=N) 이 주어진다.
// 두 번째 줄에 N개의 자연수가 오름차순으로 주어진다.

// ▣ 출력설명
// 출력순서는 사전순으로 오름차순으로 출력한다.

// ▣ 입력예제 1
// 3 2
// 3 6 9

// ▣ 출력예제 1
// 3 6
// 3 9
// 6 3
// 6 9
// 9 3
// 9 6

// 중복이 아닌 순열을 출력한다.
// ** 순열과 조합은 외워야 한다.
function solution(m, arr) {
  let answer = [];
  let n = arr.length;

  let check = Array.from({ length: n }, () => 0);
  let temp = Array.from({ length: m }, () => 0);

  function DFS(v) {
    if (v === m) {
      answer.push(temp.slice());
    } else {
      for (let i = 0; i < n; i++) {
        if (check[i] === 0) {
          // 체크한 뒤 넘어감
          check[i] = 1;
          temp[v] = arr[i];
          DFS(v + 1);
          // 체크한 것을 풀어줌
          check[i] = 0;
        }
      }
    }
  }

  DFS(0);

  return answer;
}

/**
 * ========================================================
 * @Title       : 10_순열_구하기
 * @Path        : javascript\02_Solved\inflearn\h.recursion\10_순열_구하기.spec.js
 * @Description :
 * @Date        : 2021-07-13 12:15:16
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('10_순열_구하기', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let k = 2;
    let arr = [3, 6, 9];
    const result = [
      [3, 6],
      [3, 9],
      [6, 3],
      [6, 9],
      [9, 3],
      [9, 6],
    ];

    // 테스트 결과 정의
    expect(solution(k, arr)).toEqual(result);
  });
});
