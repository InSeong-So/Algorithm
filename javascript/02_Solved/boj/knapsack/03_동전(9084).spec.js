// https://www.acmicpc.net/problem/9084 문제의 입력을 수정한 내용입니다.

/*
[ 문제 ]
우리나라 화폐단위, 특히 동전에는 1원, 5원, 10원, 50원, 100원, 500원이 있다.
이 동전들로는 정수의 금액을 만들 수 있으며 그 방법도 여러 가지가 있을 수 있다.
예를 들어, 30원을 만들기 위해서는 1원짜리 30개 또는 10원짜리 2개와 5원짜리 2개 등의 방법이 가능하다.
동전의 종류가 주어질 때에 주어진 금액을 만드는 모든 방법을 세는 프로그램을 작성하시오.

[ 입력 ]
오름차순으로 정렬된 N(1 ≤ N ≤ 20)가지 동전의 각 금액과 N가지 동전으로 만들어야 할 금액 M(1 ≤ M ≤ 10000)이 주어진다.
각 금액은 정수로서 1원부터 10000원까지 있을 수 있으며 공백으로 구분된다. 
편의를 위해 방법의 수는 2^31 - 1 보다 작고, 같은 동전이 여러 번 주어지는 경우는 없다.

[ 출력 ]
입력으로 주어지는 동전으로 금액 M을 만드는 모든 방법의 수를 한 줄에 하나씩 출력한다.
*/

function solution(coins, m) {
  let dy = Array.from({ length: m + 1 }, () => 0);

  // 1로 초기화를 해야 증감이 시작된다.
  dy[0] = 1;

  for (let i = 0; i < coins.length; i++) {
    for (let j = coins[i]; j <= m; j++) {
      dy[j] += dy[j - coins[i]];
    }
  }

  return dy[m];
}

/**
 * ========================================================
 * @Title       : 03_동전(9084)
 * @Path        : javascript\02_Solved\boj\knapsack\03_동전(9084).spec.js
 * @Description : 배낭 알고리즘
 * @Date        : 2021-07-06 03:09:24
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('03_동전(9084)', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let N = [1, 2];
    let M = 1000;
    let result = 501;

    // 테스트 결과 정의
    expect(solution(N, M)).toEqual(result);
  });
  it('기본2', () => {
    // 파라미터 정의
    let N = [1, 5, 10];
    let M = 100;
    let result = 121;

    // 테스트 결과 정의
    expect(solution(N, M)).toEqual(result);
  });
  it('기본3', () => {
    // 파라미터 정의
    let N = [5, 7];
    let M = 22;
    let result = 1;

    // 테스트 결과 정의
    expect(solution(N, M)).toEqual(result);
  });
});
