/*=======================================================================================
[최대점수 구하기(냅색 알고리즘)]
이번 정보올림피아드대회에서 좋은 성적을 내기 위하여 현수는 선생님이 주신 N개의 문제를 풀려고 한다.
각 문제는 그것을 풀었을 때 얻는 점수와 푸는데 걸리는 시간이 주어지게 된다.
제한시간 M안에 N개의 문제 중 최대점수를 얻을 수 있도록 해야 한다.

문제는 해당 시간이 걸리면 푸는 걸로 간주하므로 한 유형당 한개만 풀 수 있다.
=======================================================================================*/

// ▣ 입력설명
// 첫 번째 줄에 문제의 개수N(1<=N<=20)과 제한 시간 M(10<=M<=300)이 주어진다.
// 두 번째 줄부터 N줄에 걸쳐 문제를 풀었을 때의 점수와 푸는데 걸리는 시간이 주어진다.

// ▣ 출력설명
// 첫 번째 줄에 제한 시간안에 얻을 수 있는 최대 점수를 출력한다.

// ▣ 입력예제 1
// 5 20
// 10 5
// 25 12
// 15 8
// 6 3
// 7 4

// ▣ 출력예제 1
// 41

// 1차원 배열을 사용하지만, 앞에서 뒤로 완전탐색하면 중복수열이 발생한다.
function solution(m, arr) {
  let answer = 0;
  // 주어진 분(m)만큼 다이나믹 배열을 만든다.
  let dy = Array.from({ length: m + 1 }, () => 0);
  // i가 분이라면 dy[i]라는 시간동안 얻을 수 있는 최대 점수를 구하는 것과 같다.
  /*
  - 10, 5일때, 5분동안 10점짜리를 푼다면 아래와 같이 중복적용하면 안 된다. 어떻게 해야하는가?
  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20
  0   0   0   0   0   10  10  10  10  10  20  20  20  20  20  30  30  30  30  30  40
  
  뒤에서부터 앞으로 돌아야 중복적용을 피할 수 있다. 5를 빼는 것이다. (10, 5)
  20-5, 19-5, 18-5... 5-5 이므로 문제가 하나일때는 10점이다.
  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20
  0   0   0   0   0   10  10  10  10  10  10  10  10  10  10  10  10  10  10  10  10

  그 다음, 20에서 12를 뺀다. (25, 12)
  20-12+5, 19-12+5, 18-12+5... 16-12+5 = -1이므로 10점이 존재하면 25점으로 치환된다.
  0   1   2   3   4   5   6   7   8   9   10  11  12  13  14  15  16  17  18  19  20
  0   0   0   0   0   10  10  10  10  10  10  10  0   0   0   0   25  35  35  35  35

  즉, 음수면 치환한다.
  */
  for (let i = 0; i < arr.length; i++) {
    let ps = arr[i][0]; // 점수
    let pt = arr[i][1]; // 시간
    // 중복적용을 피하기 위해 뒤에서 앞으로 돈다.
    for (let j = m; j >= pt; j--) {
      // j라는 분에서 문제를 풀기로 한 pt를 빼준다. pt를 빼준 그 시간에서 얻을 수 있는 최대 점수에서
      // 문제해결점수를 더해준다.
      dy[j] = Math.max(dy[j], dy[j - pt] + ps);
      console.log(dy);
    }
  }

  // 주어진 시간에 해당하는 점수를 다이나믹 배열에서 빼온다.
  answer = dy[m];

  return answer;
}

/**
 * ========================================================
 * @Title       : 05_최대점수_구하기
 * @Path        : javascript\02_Solved\inflearn\j.dynamic_programming\05_최대점수_구하기.spec.js
 * @Description : 배낭 알고리즘
 * @Date        : 2021-07-06 16:12:00
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('05_최대점수_구하기', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let k = 20;
    let arr = [
      [10, 5],
      [25, 12],
      [15, 8],
      [6, 3],
      [7, 4],
    ];
    const result = 41;

    // 테스트 결과 정의
    expect(solution(k, arr)).toEqual(result);
  });
});
