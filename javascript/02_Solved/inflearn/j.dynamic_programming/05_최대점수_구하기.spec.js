/*=======================================================================================
[최대점수 구하기(냅색 알고리즘)]
이번 정보올림피아드대회에서 좋은 성적을 내기 위하여 현수는 선생님이 주신 N개의 문제를 풀려고 한다.
각 문제는 그것을 풀었을 때 얻는 점수와 푸는데 걸리는 시간이 주어지게 된다.
제한시간 M안에 N개의 문제 중 최대점수를 얻을 수 있도록 해야 한다.

문제는 해당 시간이 걸리면 푸는 걸로 간주하므로 한 유형당 한개만 풀 수 있다.
=======================================================================================*/

// ▣ 입력설명
// 첫 번째 줄에 문제의 개수N(1<=N<=20)과 제한 시간 M(10<=M<=300)이 주어진다.
// 두 번째 줄부터 N줄에 걸쳐 문제를 풀었을 때의 점수와 푸는데 걸리는 시간이 주어진다.

// ▣ 출력설명
// 첫 번째 줄에 제한 시간안에 얻을 수 있는 최대 점수를 출력한다.

// ▣ 입력예제 1
// 5 20
// 10 5
// 25 12
// 15 8
// 6 3
// 7 4

// ▣ 출력예제 1
// 41

function solution(m, arr) {
  let answer = 0;

  return answer;
}

/**
 * ========================================================
 * @Title       : 05_최대점수_구하기
 * @Path        : javascript\02_Solved\inflearn\j.dynamic_programming\05_최대점수_구하기.spec.js
 * @Description : 배낭 알고리즘
 * @Date        : 2021-07-06 16:12:00
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('05_최대점수_구하기', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let k = 20;
    let arr = [
      [10, 5],
      [25, 12],
      [15, 8],
      [6, 3],
      [7, 4],
    ];
    const result = 1000;

    // 테스트 결과 정의
    expect(solution(k, arr)).toEqual(result);
  });
});
