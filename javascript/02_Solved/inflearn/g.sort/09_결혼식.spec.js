/*=======================================================================================
[결혼식] : 그리디의 대표적인 문제
현수는 다음 달에 있을 결혼식에 피로연을 장소를 빌려 3일간 쉬지 않고 하려고 한다.
피로연에 참석하는 친구 N명의 참석하는 시간 정보를 친구들에게 미리 요구했다.
각 친구들은 자신이 몇 시에 도착해서 몇 시에 떠날 것인지 현수에게 알려주었다.
현수는 이 정보를 바탕으로 피로연 장소에 동시에 존재하는 최대 인원수를 구하여 그 인원을 수용할 수 있는 장소를 빌리려고 한다.
만약 한 친구가 오는 시간 13, 가는시간 15라면 이 친구는 13시 정각에 피로연 장에 존재하는 것이고 15시 정각에는 존재하지 않는다고 가정한다.
=======================================================================================*/

// ▣ 입력설명
// 첫째 줄에 피로연에 참석할 인원수 N(5<=N<=100,000)이 주어진다.
// 두 번째 줄부터 N줄에 걸쳐 각 인원의 오는 시간과 가는 시간이 주어진다.
// 시간은 첫날 0시를 0으로 해서 마지막날 밤 12시를 72로 하는 타임라인으로 오는 시간과 가는 시간이 음이 아닌 정수로 표현된다.

// ▣ 출력설명
// 첫째 줄에 피로연장에 동시에 존재하는 최대 인원을 출력하라.

// ▣ 입력예제 1
// 5
// 14 18
// 12 15
// 15 20
// 20 30
// 5 14

// ▣ 출력예제 1
// 2

function solution(times) {
  // startTime보다 endTime을 먼저 정렬해야 한다.
  // 5 s, 12 s, 14 e, 14 s...
  let answer = Number.MIN_SAFE_INTEGER;

  let timeLine = [];

  for (let e of times) {
    timeLine.push([e[0], 's']);
    timeLine.push([e[1], 'e']);
  }

  timeLine.sort((a, b) => {
    if (a[0] === b[0]) return a[1].charCodeAt() - b[1].charCodeAt();
    return a[0] - b[0];
  });

  let count = 0;
  for (let e of timeLine) {
    if (e[1] === 's') {
      count++;
    } else {
      count--;
    }

    answer = Math.max(answer, count);
  }

  return answer;
}

/**
 * ========================================================
 * @Title       : 09_결혼식
 * @Path        : javascript\02_Solved\inflearn\g.sortingANDgreedANDdecision\09_결혼식.spec.js
 * @Description :
 * @Date        : 2021-07-12 22:03:39
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('09_결혼식', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let arr = [
      [14, 18],
      [12, 15],
      [15, 20],
      [20, 30],
      [5, 14],
    ];
    const result = 2;

    // 테스트 결과 정의
    expect(solution(arr)).toEqual(result);
  });

  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let arr = [
      [14, 18],
      [12, 15],
      [15, 20],
      [20, 30],
      [5, 15],
    ];
    const result = 3;

    // 테스트 결과 정의
    expect(solution(arr)).toEqual(result);
  });
});
