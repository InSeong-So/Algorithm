/*=======================================================================================
[최대점수 구하기] : 깊이우선탐색
이번 정보올림피아드대회에서 좋은 성적을 내기 위하여 현수는 선생님이 주신 N개의 문제를 풀려고 한다.
각 문제는 그것을 풀었을 때 얻는 점수와 푸는데 걸리는 시간이 주어지게 된다.
제한시간 M안에 N개의 문제 중 최대점수를 얻을 수 있도록 해야 한다.
해당문제는 해당시간이 걸리면 푸는 걸로 간주하며 한 유형당 한개만 풀 수 있다.
/*=======================================================================================*/

// ▣ 입력설명
// 첫 번째 줄에 문제의 개수N(1<=N<=20)과 제한 시간 M(10<=M<=300)이 주어진다.
// 두 번째 줄부터 N줄에 걸쳐 문제를 풀었을 때의 점수와 푸는데 걸리는 시간이 주어진다.

// ▣ 출력설명
// 첫 번째 줄에 제한 시간안에 얻을 수 있는 최대 점수를 출력한다.

// ▣ 입력예제 1
// 5 20
// 10 5
// 25 12
// 15 8
// 6 3
// 7 4

// ▣ 출력예제 1
// 41

function solution(m, ps, pt) {
  let answer = Number.MIN_SAFE_INTEGER;
  let n = ps.length;

  function DFS(v, sum, time) {
    if (time > m) return;
    if (v === n) {
      answer = Math.max(answer, sum);
    } else {
      DFS(v + 1, sum + ps[v], time + pt[v]);
      DFS(v + 1, sum, time);
    }
  }

  DFS(0, 0, 0);

  return answer;
}

/**
 * ========================================================
 * @Title       : 07_최대점수_구하기
 * @Path        : javascript\02_Solved\inflearn\h.recursion\07_최대점수_구하기.spec.js
 * @Description :
 * @Date        : 2021-07-13 11:57:22
 * --------------------------------------------------------
 * @Author      : Inseong-so(https://github.com/inseong-so)
 * ========================================================
 */
describe('07_최대점수_구하기', () => {
  // 테스트 케이스명
  it('기본1', () => {
    // 파라미터 정의
    let k = 20;
    let ps = [10, 25, 15, 6, 7];
    let pt = [5, 12, 8, 3, 4];
    const result = 41;

    // 테스트 결과 정의
    expect(solution(k, ps, pt)).toEqual(result);
  });
});
